/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import org.openapitools.client.model.DiscountDetails;
import org.openapitools.client.model.FixedPriceDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DTO for promotions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-02T11:37:30.291+02:00[Europe/Paris]")
public class PromotionDTO {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private LocalDate creationDate;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private LocalDate endDate;

  public static final String SERIALIZED_NAME_ITEM_CODE = "itemCode";
  @SerializedName(SERIALIZED_NAME_ITEM_CODE)
  private String itemCode;

  /**
   * Type of promotion
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    DISCOUNT("DISCOUNT"),
    
    FIXED_PRICE("FIXED_PRICE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_DISCOUNT_DETAILS = "discountDetails";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_DETAILS)
  private DiscountDetails discountDetails;

  public static final String SERIALIZED_NAME_FIXED_PRICE_DETAILS = "fixedPriceDetails";
  @SerializedName(SERIALIZED_NAME_FIXED_PRICE_DETAILS)
  private FixedPriceDetails fixedPriceDetails;

  public static final String SERIALIZED_NAME_VALID_PROMOTION = "validPromotion";
  @SerializedName(SERIALIZED_NAME_VALID_PROMOTION)
  private Boolean validPromotion;

  public PromotionDTO() {
  }

  public PromotionDTO id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique promotion ID
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public PromotionDTO description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Promotion description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public PromotionDTO creationDate(LocalDate creationDate) {
    
    this.creationDate = creationDate;
    return this;
  }

   /**
   * Creation date
   * @return creationDate
  **/
  @javax.annotation.Nullable
  public LocalDate getCreationDate() {
    return creationDate;
  }


  public void setCreationDate(LocalDate creationDate) {
    this.creationDate = creationDate;
  }


  public PromotionDTO startDate(LocalDate startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Start date of promotion validity
   * @return startDate
  **/
  @javax.annotation.Nonnull
  public LocalDate getStartDate() {
    return startDate;
  }


  public void setStartDate(LocalDate startDate) {
    this.startDate = startDate;
  }


  public PromotionDTO endDate(LocalDate endDate) {
    
    this.endDate = endDate;
    return this;
  }

   /**
   * End date of promotion validity
   * @return endDate
  **/
  @javax.annotation.Nonnull
  public LocalDate getEndDate() {
    return endDate;
  }


  public void setEndDate(LocalDate endDate) {
    this.endDate = endDate;
  }


  public PromotionDTO itemCode(String itemCode) {
    
    this.itemCode = itemCode;
    return this;
  }

   /**
   * Item code to which the promotion applies
   * @return itemCode
  **/
  @javax.annotation.Nonnull
  public String getItemCode() {
    return itemCode;
  }


  public void setItemCode(String itemCode) {
    this.itemCode = itemCode;
  }


  public PromotionDTO type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Type of promotion
   * @return type
  **/
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public PromotionDTO discountDetails(DiscountDetails discountDetails) {
    
    this.discountDetails = discountDetails;
    return this;
  }

   /**
   * Get discountDetails
   * @return discountDetails
  **/
  @javax.annotation.Nullable
  public DiscountDetails getDiscountDetails() {
    return discountDetails;
  }


  public void setDiscountDetails(DiscountDetails discountDetails) {
    this.discountDetails = discountDetails;
  }


  public PromotionDTO fixedPriceDetails(FixedPriceDetails fixedPriceDetails) {
    
    this.fixedPriceDetails = fixedPriceDetails;
    return this;
  }

   /**
   * Get fixedPriceDetails
   * @return fixedPriceDetails
  **/
  @javax.annotation.Nullable
  public FixedPriceDetails getFixedPriceDetails() {
    return fixedPriceDetails;
  }


  public void setFixedPriceDetails(FixedPriceDetails fixedPriceDetails) {
    this.fixedPriceDetails = fixedPriceDetails;
  }


  public PromotionDTO validPromotion(Boolean validPromotion) {
    
    this.validPromotion = validPromotion;
    return this;
  }

   /**
   * Get validPromotion
   * @return validPromotion
  **/
  @javax.annotation.Nullable
  public Boolean getValidPromotion() {
    return validPromotion;
  }


  public void setValidPromotion(Boolean validPromotion) {
    this.validPromotion = validPromotion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PromotionDTO comComerzziaPromocionesapiDtoPromotionDTO = (PromotionDTO) o;
    return Objects.equals(this.id, comComerzziaPromocionesapiDtoPromotionDTO.id) &&
        Objects.equals(this.description, comComerzziaPromocionesapiDtoPromotionDTO.description) &&
        Objects.equals(this.creationDate, comComerzziaPromocionesapiDtoPromotionDTO.creationDate) &&
        Objects.equals(this.startDate, comComerzziaPromocionesapiDtoPromotionDTO.startDate) &&
        Objects.equals(this.endDate, comComerzziaPromocionesapiDtoPromotionDTO.endDate) &&
        Objects.equals(this.itemCode, comComerzziaPromocionesapiDtoPromotionDTO.itemCode) &&
        Objects.equals(this.type, comComerzziaPromocionesapiDtoPromotionDTO.type) &&
        Objects.equals(this.discountDetails, comComerzziaPromocionesapiDtoPromotionDTO.discountDetails) &&
        Objects.equals(this.fixedPriceDetails, comComerzziaPromocionesapiDtoPromotionDTO.fixedPriceDetails) &&
        Objects.equals(this.validPromotion, comComerzziaPromocionesapiDtoPromotionDTO.validPromotion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, description, creationDate, startDate, endDate, itemCode, type, discountDetails, fixedPriceDetails, validPromotion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComComerzziaPromocionesapiDtoPromotionDTO {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    itemCode: ").append(toIndentedString(itemCode)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    discountDetails: ").append(toIndentedString(discountDetails)).append("\n");
    sb.append("    fixedPriceDetails: ").append(toIndentedString(fixedPriceDetails)).append("\n");
    sb.append("    validPromotion: ").append(toIndentedString(validPromotion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("description");
    openapiFields.add("creationDate");
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("itemCode");
    openapiFields.add("type");
    openapiFields.add("discountDetails");
    openapiFields.add("fixedPriceDetails");
    openapiFields.add("validPromotion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("startDate");
    openapiRequiredFields.add("endDate");
    openapiRequiredFields.add("itemCode");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ComComerzziaPromocionesapiDtoPromotionDTO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PromotionDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComComerzziaPromocionesapiDtoPromotionDTO is not found in the empty JSON string", PromotionDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PromotionDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ComComerzziaPromocionesapiDtoPromotionDTO` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PromotionDTO.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("itemCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemCode").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `discountDetails`
      if (jsonObj.get("discountDetails") != null && !jsonObj.get("discountDetails").isJsonNull()) {
        DiscountDetails.validateJsonObject(jsonObj.getAsJsonObject("discountDetails"));
      }
      // validate the optional field `fixedPriceDetails`
      if (jsonObj.get("fixedPriceDetails") != null && !jsonObj.get("fixedPriceDetails").isJsonNull()) {
        FixedPriceDetails.validateJsonObject(jsonObj.getAsJsonObject("fixedPriceDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PromotionDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComComerzziaPromocionesapiDtoPromotionDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PromotionDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PromotionDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<PromotionDTO>() {
           @Override
           public void write(JsonWriter out, PromotionDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PromotionDTO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ComComerzziaPromocionesapiDtoPromotionDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ComComerzziaPromocionesapiDtoPromotionDTO
  * @throws IOException if the JSON string is invalid with respect to ComComerzziaPromocionesapiDtoPromotionDTO
  */
  public static PromotionDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PromotionDTO.class);
  }

 /**
  * Convert an instance of ComComerzziaPromocionesapiDtoPromotionDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

