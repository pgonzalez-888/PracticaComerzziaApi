/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DTO representing a sale line in a ticket
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-02T11:37:30.291+02:00[Europe/Paris]")
public class SaleLineDTO {
  public static final String SERIALIZED_NAME_ITEM_CODE = "itemCode";
  @SerializedName(SERIALIZED_NAME_ITEM_CODE)
  private String itemCode;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_ORIGINAL_UNIT_PRICE = "originalUnitPrice";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_UNIT_PRICE)
  private BigDecimal originalUnitPrice;

  public static final String SERIALIZED_NAME_DISCOUNTED_UNIT_PRICE = "discountedUnitPrice";
  @SerializedName(SERIALIZED_NAME_DISCOUNTED_UNIT_PRICE)
  private BigDecimal discountedUnitPrice;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT = "totalAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT)
  private BigDecimal totalAmount;

  public static final String SERIALIZED_NAME_APPLIED_PROMOTION_ID = "appliedPromotionId";
  @SerializedName(SERIALIZED_NAME_APPLIED_PROMOTION_ID)
  private String appliedPromotionId;

  public SaleLineDTO() {
  }

  public SaleLineDTO itemCode(String itemCode) {
    
    this.itemCode = itemCode;
    return this;
  }

   /**
   * Code of the sold article
   * @return itemCode
  **/
  @javax.annotation.Nonnull
  public String getItemCode() {
    return itemCode;
  }


  public void setItemCode(String itemCode) {
    this.itemCode = itemCode;
  }


  public SaleLineDTO quantity(Integer quantity) {
    
    this.quantity = quantity;
    return this;
  }

   /**
   * Quantity of articles sold
   * @return quantity
  **/
  @javax.annotation.Nullable
  public Integer getQuantity() {
    return quantity;
  }


  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public SaleLineDTO originalUnitPrice(BigDecimal originalUnitPrice) {
    
    this.originalUnitPrice = originalUnitPrice;
    return this;
  }

   /**
   * Original unit price
   * minimum: 0.01
   * @return originalUnitPrice
  **/
  @javax.annotation.Nonnull
  public BigDecimal getOriginalUnitPrice() {
    return originalUnitPrice;
  }


  public void setOriginalUnitPrice(BigDecimal originalUnitPrice) {
    this.originalUnitPrice = originalUnitPrice;
  }


  public SaleLineDTO discountedUnitPrice(BigDecimal discountedUnitPrice) {
    
    this.discountedUnitPrice = discountedUnitPrice;
    return this;
  }

   /**
   * Unit price after applying promotions
   * @return discountedUnitPrice
  **/
  @javax.annotation.Nullable
  public BigDecimal getDiscountedUnitPrice() {
    return discountedUnitPrice;
  }


  public void setDiscountedUnitPrice(BigDecimal discountedUnitPrice) {
    this.discountedUnitPrice = discountedUnitPrice;
  }


  public SaleLineDTO totalAmount(BigDecimal totalAmount) {
    
    this.totalAmount = totalAmount;
    return this;
  }

   /**
   * Total amount of the line (discounted price x quantity)
   * @return totalAmount
  **/
  @javax.annotation.Nullable
  public BigDecimal getTotalAmount() {
    return totalAmount;
  }


  public void setTotalAmount(BigDecimal totalAmount) {
    this.totalAmount = totalAmount;
  }


  public SaleLineDTO appliedPromotionId(String appliedPromotionId) {
    
    this.appliedPromotionId = appliedPromotionId;
    return this;
  }

   /**
   * ID of the applied promotion (if any)
   * @return appliedPromotionId
  **/
  @javax.annotation.Nullable
  public String getAppliedPromotionId() {
    return appliedPromotionId;
  }


  public void setAppliedPromotionId(String appliedPromotionId) {
    this.appliedPromotionId = appliedPromotionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SaleLineDTO comComerzziaPromocionesapiDtoSaleLineDTO = (SaleLineDTO) o;
    return Objects.equals(this.itemCode, comComerzziaPromocionesapiDtoSaleLineDTO.itemCode) &&
        Objects.equals(this.quantity, comComerzziaPromocionesapiDtoSaleLineDTO.quantity) &&
        Objects.equals(this.originalUnitPrice, comComerzziaPromocionesapiDtoSaleLineDTO.originalUnitPrice) &&
        Objects.equals(this.discountedUnitPrice, comComerzziaPromocionesapiDtoSaleLineDTO.discountedUnitPrice) &&
        Objects.equals(this.totalAmount, comComerzziaPromocionesapiDtoSaleLineDTO.totalAmount) &&
        Objects.equals(this.appliedPromotionId, comComerzziaPromocionesapiDtoSaleLineDTO.appliedPromotionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(itemCode, quantity, originalUnitPrice, discountedUnitPrice, totalAmount, appliedPromotionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComComerzziaPromocionesapiDtoSaleLineDTO {\n");
    sb.append("    itemCode: ").append(toIndentedString(itemCode)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    originalUnitPrice: ").append(toIndentedString(originalUnitPrice)).append("\n");
    sb.append("    discountedUnitPrice: ").append(toIndentedString(discountedUnitPrice)).append("\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("    appliedPromotionId: ").append(toIndentedString(appliedPromotionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("itemCode");
    openapiFields.add("quantity");
    openapiFields.add("originalUnitPrice");
    openapiFields.add("discountedUnitPrice");
    openapiFields.add("totalAmount");
    openapiFields.add("appliedPromotionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("itemCode");
    openapiRequiredFields.add("originalUnitPrice");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ComComerzziaPromocionesapiDtoSaleLineDTO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SaleLineDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComComerzziaPromocionesapiDtoSaleLineDTO is not found in the empty JSON string", SaleLineDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SaleLineDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ComComerzziaPromocionesapiDtoSaleLineDTO` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SaleLineDTO.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("itemCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemCode").toString()));
      }
      if ((jsonObj.get("appliedPromotionId") != null && !jsonObj.get("appliedPromotionId").isJsonNull()) && !jsonObj.get("appliedPromotionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appliedPromotionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appliedPromotionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SaleLineDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComComerzziaPromocionesapiDtoSaleLineDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SaleLineDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SaleLineDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<SaleLineDTO>() {
           @Override
           public void write(JsonWriter out, SaleLineDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SaleLineDTO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ComComerzziaPromocionesapiDtoSaleLineDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ComComerzziaPromocionesapiDtoSaleLineDTO
  * @throws IOException if the JSON string is invalid with respect to ComComerzziaPromocionesapiDtoSaleLineDTO
  */
  public static SaleLineDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SaleLineDTO.class);
  }

 /**
  * Convert an instance of ComComerzziaPromocionesapiDtoSaleLineDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

