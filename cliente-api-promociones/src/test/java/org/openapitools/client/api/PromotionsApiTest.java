/*
 * OpenAPI definition No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator) The version of the OpenAPI document: v0
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import static org.junit.jupiter.api.Assertions.*;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.*;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.model.*;

public class PromotionsApiTest {

    private PromotionsApi api;
    private String discountPromoId;
    private String fixedPromoId;
    private final String testItemCode = "TEST_ITEM";

    @BeforeEach
    public void setUp() throws ApiException {
        ApiClient client = new ApiClient();
        client.addDefaultHeader("API-KEY", "czzpromociones");
        api = new PromotionsApi(client);

        // create a unique discount promotion
        discountPromoId = "PROMO_" + UUID.randomUUID().toString().substring(0,8);
        PromotionDTO discountPromo = new PromotionDTO();
        discountPromo.setId(discountPromoId);
        discountPromo.setType(PromotionDTO.TypeEnum.DISCOUNT);
        discountPromo.setItemCode(testItemCode);
        discountPromo.setStartDate(LocalDate.now());
        discountPromo.setEndDate(LocalDate.now().plusYears(1));
        DiscountDetails dd = new DiscountDetails();
        dd.setPercentage(new BigDecimal("20"));
        discountPromo.setDiscountDetails(dd);
        api.createPromotion(discountPromo);

        // create a unique fixed-price promotion
        fixedPromoId = "FIXED_" + UUID.randomUUID().toString().substring(0,8);
        PromotionDTO fixedPromo = new PromotionDTO();
        fixedPromo.setId(fixedPromoId);
        fixedPromo.setType(PromotionDTO.TypeEnum.FIXED_PRICE);
        fixedPromo.setItemCode("ITEM_FIXED");
        fixedPromo.setStartDate(LocalDate.now());
        fixedPromo.setEndDate(LocalDate.now().plusDays(10));
        FixedPriceDetails fp = new FixedPriceDetails();
        fp.setPrice(new BigDecimal("3"));
        fixedPromo.setFixedPriceDetails(fp);
        api.createPromotion(fixedPromo);
    }

    @AfterEach
    public void cleanUp() {
        try {
            api.deletePromotion(discountPromoId);
            api.deletePromotion(fixedPromoId);
        } catch (ApiException e) {
            if (e.getCode() != 404) e.printStackTrace();
        }
    }

    @Test
    public void createPromotionTest() throws ApiException {
        PromotionDTO p = api.getPromotionById(discountPromoId);
        assertNotNull(p);
        assertEquals(discountPromoId, p.getId());
    }

    @Test
    public void createPromotionFixedTest() throws ApiException {
        PromotionDTO p = api.getPromotionById(fixedPromoId);
        assertNotNull(p);
        assertEquals("ITEM_FIXED", p.getItemCode());
    }

    @Test
    public void createInvalidPromotionTest() {
        try {
            api.createPromotion(new PromotionDTO());
            fail("Expected ApiException");
        } catch (ApiException e) {
            assertEquals(400, e.getCode());
        }
    }

    @Test
    public void updatePromotionTest() throws ApiException {
        PromotionDTO updated = new PromotionDTO();
        updated.setId(discountPromoId);
        updated.setType(PromotionDTO.TypeEnum.DISCOUNT);
        updated.setItemCode(testItemCode);
        updated.setStartDate(LocalDate.now());
        updated.setEndDate(LocalDate.now().plusDays(30));
        DiscountDetails dd = new DiscountDetails();
        dd.setPercentage(new BigDecimal("30"));
        updated.setDiscountDetails(dd);

        PromotionDTO resp = api.updatePromotion(discountPromoId, updated);
        assertEquals(30, resp.getDiscountDetails().getPercentage().intValue());
    }

    @Test
    public void updateNonExistentPromotionTest() {
        PromotionDTO p = new PromotionDTO();
        p.setId("NONE");
        p.setType(PromotionDTO.TypeEnum.DISCOUNT);
        p.setItemCode(testItemCode);
        p.setStartDate(LocalDate.now());
        p.setEndDate(LocalDate.now().plusDays(5));
        DiscountDetails dd = new DiscountDetails(); dd.setPercentage(new BigDecimal("10"));
        p.setDiscountDetails(dd);
        try {
            api.updatePromotion("NONE", p);
            fail("Expected ApiException");
        } catch (ApiException e) {
            assertEquals(404, e.getCode());
        }
    }

    @Test
    public void getPromotionByIdTest() throws ApiException {
        assertEquals(discountPromoId, api.getPromotionById(discountPromoId).getId());
    }

    @Test
    public void getNonExistentPromotionTest() {
        try {
            api.getPromotionById("NONE");
            fail("Expected ApiException");
        } catch (ApiException e) {
            assertEquals(404, e.getCode());
        }
    }

    @Test
    public void getAllPromotionsTest() throws ApiException {
        List<PromotionDTO> all = api.getAllPromotions();
        assertFalse(all.isEmpty());
        assertTrue(all.stream().anyMatch(p -> p.getId().equals(discountPromoId)));
    }

    @Test
    public void applyPromotionsTest() throws ApiException {
        TicketDTO t = new TicketDTO(); t.setId("T1");
        SaleLineDTO sl = new SaleLineDTO();
        sl.setItemCode(testItemCode);
        sl.setQuantity(1);
        sl.setOriginalUnitPrice(new BigDecimal("100"));
        t.setSaleLines(Collections.singletonList(sl));

        BigDecimal disc = api.applyPromotions(t)
            .getSaleLines().get(0).getDiscountedUnitPrice();
        assertEquals(0, disc.compareTo(new BigDecimal("80.00")));
    }

    @Test
    public void applyPromotionsNoMatchTest() throws ApiException {
        TicketDTO t = new TicketDTO(); t.setId("T2");
        SaleLineDTO sl = new SaleLineDTO();
        sl.setItemCode("NONE"); sl.setQuantity(1);
        sl.setOriginalUnitPrice(new BigDecimal("50"));
        t.setSaleLines(Collections.singletonList(sl));
        BigDecimal disc = api.applyPromotions(t)
            .getSaleLines().get(0).getDiscountedUnitPrice();
        assertEquals(0, disc.compareTo(new BigDecimal("50.00")));
    }

    @Test
    public void applyPromotionsMixedLinesTest() throws ApiException {
        TicketDTO t = new TicketDTO(); t.setId("T3");
        SaleLineDTO a = new SaleLineDTO();
        a.setItemCode(testItemCode); a.setQuantity(1);
        a.setOriginalUnitPrice(new BigDecimal("100"));
        SaleLineDTO b = new SaleLineDTO();
        b.setItemCode("NONE"); b.setQuantity(1);
        b.setOriginalUnitPrice(new BigDecimal("50"));
        t.setSaleLines(Arrays.asList(a,b));
        List<SaleLineDTO> out = api.applyPromotions(t).getSaleLines();
        assertEquals(0, out.get(0).getDiscountedUnitPrice().compareTo(new BigDecimal("80.00")));
        assertEquals(0, out.get(1).getDiscountedUnitPrice().compareTo(new BigDecimal("50.00")));
    }

    @Test
    public void applyPromotionsFixedPriceTest() throws ApiException {
        TicketDTO t = new TicketDTO(); t.setId("T4");
        SaleLineDTO sl = new SaleLineDTO();
        sl.setItemCode("ITEM_FIXED"); sl.setQuantity(3);
        sl.setOriginalUnitPrice(new BigDecimal("5"));
        t.setSaleLines(Collections.singletonList(sl));
        BigDecimal unit = api.applyPromotions(t)
            .getSaleLines().get(0).getDiscountedUnitPrice();
        assertEquals(0, unit.compareTo(new BigDecimal("3.00")));
    }

    @Test
    public void applyPromotionsEmptyTest() throws ApiException {
        TicketDTO t = new TicketDTO(); t.setId("T5");
        t.setSaleLines(Collections.emptyList());
        assertTrue(api.applyPromotions(t).getSaleLines().isEmpty());
    }

    @Test
    public void deletePromotionTest() throws ApiException {
        api.deletePromotion(discountPromoId);
        try {
            api.getPromotionById(discountPromoId);
            fail("Expected ApiException");
        } catch (ApiException e) {
            assertEquals(404, e.getCode());
        }
    }

    @Test
    public void deleteNonExistentPromotionTest() {
        try {
            api.deletePromotion("NONE");
            fail("Expected ApiException");
        } catch (ApiException e) {
            assertEquals(404, e.getCode());
        }
    }
}
