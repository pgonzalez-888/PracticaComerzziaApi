/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Representa una línea de venta dentro de un ticket
 */
@ApiModel(description = "Representa una línea de venta dentro de un ticket")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-25T13:28:09.707+02:00[Europe/Paris]")
public class LineaVenta {
  public static final String SERIALIZED_NAME_CODIGO_ARTICULO = "codigoArticulo";
  @SerializedName(SERIALIZED_NAME_CODIGO_ARTICULO)
  private String codigoArticulo;

  public static final String SERIALIZED_NAME_CANTIDAD = "cantidad";
  @SerializedName(SERIALIZED_NAME_CANTIDAD)
  private Integer cantidad;

  public static final String SERIALIZED_NAME_PRECIO_UNITARIO_ORIGINAL = "precioUnitarioOriginal";
  @SerializedName(SERIALIZED_NAME_PRECIO_UNITARIO_ORIGINAL)
  private BigDecimal precioUnitarioOriginal;

  public static final String SERIALIZED_NAME_PRECIO_UNITARIO_PROMOCIONADO = "precioUnitarioPromocionado";
  @SerializedName(SERIALIZED_NAME_PRECIO_UNITARIO_PROMOCIONADO)
  private BigDecimal precioUnitarioPromocionado;

  public static final String SERIALIZED_NAME_IMPORTE_TOTAL = "importeTotal";
  @SerializedName(SERIALIZED_NAME_IMPORTE_TOTAL)
  private BigDecimal importeTotal;

  public static final String SERIALIZED_NAME_ID_PROMOCION_APLICADA = "idPromocionAplicada";
  @SerializedName(SERIALIZED_NAME_ID_PROMOCION_APLICADA)
  private String idPromocionAplicada;

  public LineaVenta() { 
  }

  public LineaVenta codigoArticulo(String codigoArticulo) {
    
    this.codigoArticulo = codigoArticulo;
    return this;
  }

   /**
   * Código del artículo vendido
   * @return codigoArticulo
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "A12345", required = true, value = "Código del artículo vendido")

  public String getCodigoArticulo() {
    return codigoArticulo;
  }


  public void setCodigoArticulo(String codigoArticulo) {
    this.codigoArticulo = codigoArticulo;
  }


  public LineaVenta cantidad(Integer cantidad) {
    
    this.cantidad = cantidad;
    return this;
  }

   /**
   * Cantidad de artículos vendidos
   * minimum: 1
   * @return cantidad
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2", value = "Cantidad de artículos vendidos")

  public Integer getCantidad() {
    return cantidad;
  }


  public void setCantidad(Integer cantidad) {
    this.cantidad = cantidad;
  }


  public LineaVenta precioUnitarioOriginal(BigDecimal precioUnitarioOriginal) {
    
    this.precioUnitarioOriginal = precioUnitarioOriginal;
    return this;
  }

   /**
   * Precio original por unidad
   * @return precioUnitarioOriginal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10.99", value = "Precio original por unidad")

  public BigDecimal getPrecioUnitarioOriginal() {
    return precioUnitarioOriginal;
  }


  public void setPrecioUnitarioOriginal(BigDecimal precioUnitarioOriginal) {
    this.precioUnitarioOriginal = precioUnitarioOriginal;
  }


  public LineaVenta precioUnitarioPromocionado(BigDecimal precioUnitarioPromocionado) {
    
    this.precioUnitarioPromocionado = precioUnitarioPromocionado;
    return this;
  }

   /**
   * Precio por unidad después de aplicar promociones
   * @return precioUnitarioPromocionado
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "8.99", value = "Precio por unidad después de aplicar promociones")

  public BigDecimal getPrecioUnitarioPromocionado() {
    return precioUnitarioPromocionado;
  }


  public void setPrecioUnitarioPromocionado(BigDecimal precioUnitarioPromocionado) {
    this.precioUnitarioPromocionado = precioUnitarioPromocionado;
  }


  public LineaVenta importeTotal(BigDecimal importeTotal) {
    
    this.importeTotal = importeTotal;
    return this;
  }

   /**
   * Importe total de la línea (precio promocionado x cantidad)
   * @return importeTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "17.98", value = "Importe total de la línea (precio promocionado x cantidad)")

  public BigDecimal getImporteTotal() {
    return importeTotal;
  }


  public void setImporteTotal(BigDecimal importeTotal) {
    this.importeTotal = importeTotal;
  }


  public LineaVenta idPromocionAplicada(String idPromocionAplicada) {
    
    this.idPromocionAplicada = idPromocionAplicada;
    return this;
  }

   /**
   * ID de la promoción aplicada (si existe)
   * @return idPromocionAplicada
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "PROMO2024", value = "ID de la promoción aplicada (si existe)")

  public String getIdPromocionAplicada() {
    return idPromocionAplicada;
  }


  public void setIdPromocionAplicada(String idPromocionAplicada) {
    this.idPromocionAplicada = idPromocionAplicada;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LineaVenta lineaVenta = (LineaVenta) o;
    return Objects.equals(this.codigoArticulo, lineaVenta.codigoArticulo) &&
        Objects.equals(this.cantidad, lineaVenta.cantidad) &&
        Objects.equals(this.precioUnitarioOriginal, lineaVenta.precioUnitarioOriginal) &&
        Objects.equals(this.precioUnitarioPromocionado, lineaVenta.precioUnitarioPromocionado) &&
        Objects.equals(this.importeTotal, lineaVenta.importeTotal) &&
        Objects.equals(this.idPromocionAplicada, lineaVenta.idPromocionAplicada);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codigoArticulo, cantidad, precioUnitarioOriginal, precioUnitarioPromocionado, importeTotal, idPromocionAplicada);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LineaVenta {\n");
    sb.append("    codigoArticulo: ").append(toIndentedString(codigoArticulo)).append("\n");
    sb.append("    cantidad: ").append(toIndentedString(cantidad)).append("\n");
    sb.append("    precioUnitarioOriginal: ").append(toIndentedString(precioUnitarioOriginal)).append("\n");
    sb.append("    precioUnitarioPromocionado: ").append(toIndentedString(precioUnitarioPromocionado)).append("\n");
    sb.append("    importeTotal: ").append(toIndentedString(importeTotal)).append("\n");
    sb.append("    idPromocionAplicada: ").append(toIndentedString(idPromocionAplicada)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("codigoArticulo");
    openapiFields.add("cantidad");
    openapiFields.add("precioUnitarioOriginal");
    openapiFields.add("precioUnitarioPromocionado");
    openapiFields.add("importeTotal");
    openapiFields.add("idPromocionAplicada");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("codigoArticulo");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LineaVenta
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (LineaVenta.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in LineaVenta is not found in the empty JSON string", LineaVenta.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!LineaVenta.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LineaVenta` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LineaVenta.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("codigoArticulo") != null && !jsonObj.get("codigoArticulo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `codigoArticulo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("codigoArticulo").toString()));
      }
      if (jsonObj.get("idPromocionAplicada") != null && !jsonObj.get("idPromocionAplicada").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idPromocionAplicada` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idPromocionAplicada").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LineaVenta.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LineaVenta' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LineaVenta> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LineaVenta.class));

       return (TypeAdapter<T>) new TypeAdapter<LineaVenta>() {
           @Override
           public void write(JsonWriter out, LineaVenta value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LineaVenta read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LineaVenta given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LineaVenta
  * @throws IOException if the JSON string is invalid with respect to LineaVenta
  */
  public static LineaVenta fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LineaVenta.class);
  }

 /**
  * Convert an instance of LineaVenta to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

