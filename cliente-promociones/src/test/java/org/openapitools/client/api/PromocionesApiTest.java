/*
 * OpenAPI definition No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator) The version of the OpenAPI document: v0 NOTE: This class is auto
 * generated by OpenAPI Generator (https://openapi-generator.tech). https://openapi-generator.tech Do not edit the class
 * manually.
 */

package org.openapitools.client.api;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDate;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.openapitools.client.ApiException;
import org.openapitools.client.model.LineaVenta;
import org.openapitools.client.model.PromocionEntity;
import org.openapitools.client.model.PromocionEntity.TipoEnum;
import org.openapitools.client.model.Ticket;

public class PromocionesApiTest {

	private final PromocionesApi api = new PromocionesApi();

	/**
	 * Crear una nueva promoción Crea una nueva promoción si no existe una con el mismo ID
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void crearPromocionTest() throws ApiException {
		// Crear una nueva promoción
		PromocionEntity promocionEntity = new PromocionEntity();
		promocionEntity.setId("PROMO2025");
		promocionEntity.setDescripcion("Descuento en producto B");
		promocionEntity.setFechaInicio(LocalDate.of(2024, 5, 1));
		promocionEntity.setFechaFin(LocalDate.of(2026, 6, 1));
		promocionEntity.setPorcentajeDescuento(BigDecimal.valueOf(20)); // 15% de descuento
		promocionEntity.setCodigoArticulo("EO");
		promocionEntity.setTipo(TipoEnum.DESCUENTO);

		// Llamamos al API para crear la promoción
		PromocionEntity response = api.crearPromocion(promocionEntity);

		// Verificamos que la respuesta contenga los valores correctos
		assertNotNull(response);
		assertEquals("PROMO2025", response.getId());
		assertEquals("Descuento en producto B", response.getDescripcion());
		assertEquals(BigDecimal.valueOf(20), response.getPorcentajeDescuento());
	}

	/**
	 * Actualizar una promoción existente Actualiza los datos de una promoción ya existente utilizando su ID
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void actualizarPromocionTest() throws ApiException {
		// Asumimos que tenemos un id válido de una promoción ya existente
		String id = "PROMO2025";

		// Crear una nueva entidad de promoción con los valores a actualizar
		PromocionEntity promocionEntity = new PromocionEntity();
		promocionEntity.setId(id);
		promocionEntity.setDescripcion("Nuevo descuento en producto A");
		promocionEntity.setFechaInicio(LocalDate.of(2024, 4, 1));
		promocionEntity.setFechaFin(LocalDate.of(2026, 5, 1));
		promocionEntity.setPorcentajeDescuento(BigDecimal.valueOf(25)); // Nuevo descuento del 25%
		promocionEntity.setCodigoArticulo("EO");
		promocionEntity.setTipo(TipoEnum.DESCUENTO);

		// Llamamos al API para actualizar la promoción
		PromocionEntity response = api.actualizarPromocion(id, promocionEntity);

		// Verificamos que el ID de la promoción en la respuesta coincida con el ID enviado
		assertEquals(id, response.getId());

		// Verificamos que los nuevos valores de la promoción estén actualizados
		assertEquals("Nuevo descuento en producto A", response.getDescripcion());
		assertEquals(BigDecimal.valueOf(25), response.getPorcentajeDescuento());
	}

	/**
	 * Aplicar promociones a un ticket Aplica las promociones disponibles a un ticket dado y devuelve el ticket
	 * actualizado
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void aplicarPromocionesTest() throws ApiException {
		// Crear un ticket con una línea de venta
		Ticket ticket = new Ticket();
		ticket.setId("TICKET");
		LineaVenta linea = new LineaVenta();
		linea.setCodigoArticulo("EO");
		linea.setCantidad(2);
		linea.setPrecioUnitarioOriginal(BigDecimal.valueOf(10.00));
		ticket.addLineasVentaItem(linea);

		// Aplicar la promoción al ticket
		Ticket response = api.aplicarPromociones(ticket);

		// Verificamos que las líneas de venta del ticket tengan la promoción aplicada
		BigDecimal precioEsperado = BigDecimal.valueOf(7.50).setScale(3, RoundingMode.HALF_UP);; // 20% de descuento sobre 10.00
		assertEquals(precioEsperado, response.getLineasVenta().get(0).getPrecioUnitarioPromocionado());

		// Verificamos que el importe total se haya actualizado
		BigDecimal importeEsperado = precioEsperado.multiply(BigDecimal.valueOf(2)); // 2 artículos
		assertEquals(importeEsperado, response.getLineasVenta().get(0).getImporteTotal());
	}

	@Test
	public void obtenerPromocionPorIdTest() throws ApiException {
		// ID de la promoción que queremos obtener
		String id = "PROMO2025";

		// Llamamos al API para obtener la promoción por ID
		PromocionEntity response = api.obtenerPromocionPorId(id);

		// Verificamos que el ID de la promoción en la respuesta coincida con el ID solicitado
		assertEquals(id, response.getId());
	}

	/**
	 * Obtener todas las promociones Devuelve una lista con todas las promociones disponibles
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void obtenerPromocionesTest() throws ApiException {
		// Llamamos al API para obtener todas las promociones
		List<PromocionEntity> response = api.obtenerPromociones();

		// Verificamos que la respuesta no sea vacía
		assertNotNull(response);
		assertFalse(response.isEmpty());
	}

	/**
	 * Eliminar una promoción Elimina una promoción específica dado su ID
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void eliminarPromocionTest() throws ApiException {
		// ID de la promoción que se quiere eliminar
		String id = "PROMO2025";

		// Llamamos al API para eliminar la promoción
		api.eliminarPromocion(id);

	}

	/**
	 * Obtener una promoción por ID Devuelve los detalles de una promoción específica dado su ID
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */

}